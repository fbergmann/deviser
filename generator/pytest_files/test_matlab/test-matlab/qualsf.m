%%%%% REMOVE END
%%%%% ADD ADDITIONAL
    elseif strcmp(pkg, 'qual')
      if (extension)
        if (isQUALExtension(typecode))
          [found, fhandle] = getQUALFieldnameFunction(typecode);
        end;
      else
        [found, fhandle] = getQUALFieldnameFunction(typecode);
      end;
    end;
%%%%% REMOVE END
%%%%% ADD ADDITIONAL


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% ADD isExtension
%%%% ADD isExtension
function extend = isQUALExtension(typecode)
  extend = 0;
  switch (typecode)
    case {'SBML_QUAL_MODEL', 'QUALModel', 'SBML_MODEL', 'Model', 'model'}
      extend = 1;
  end;
%%%% END isExtension


%%%% ADD getFieldname
%%%% ADD getFieldname
function [found, fhandle] = getQUALFieldnameFunction(typecode)
  found = 1;
  switch (typecode)
    case {'SBML_QUAL_QUALITATIVE_SPECIES', 'QualitativeSpecies', 'qualitativeSpecies', 'qual_qualitativeSpecies'}
      fhandle = str2func('getQualitativeSpeciesFieldnames');
    case {'SBML_QUAL_TRANSITION', 'Transition', 'transition', 'qual_transition'}
      fhandle = str2func('getTransitionFieldnames');
    case {'SBML_QUAL_INPUT', 'Input', 'input', 'qual_input'}
      fhandle = str2func('getInputFieldnames');
    case {'SBML_QUAL_OUTPUT', 'Output', 'output', 'qual_output'}
      fhandle = str2func('getOutputFieldnames');
    case {'SBML_QUAL_DEFAULT_TERM', 'DefaultTerm', 'defaultTerm', 'qual_defaultTerm'}
      fhandle = str2func('getDefaultTermFieldnames');
    case {'SBML_QUAL_FUNCTION_TERM', 'FunctionTerm', 'functionTerm', 'qual_functionTerm'}
      fhandle = str2func('getFunctionTermFieldnames');
    case {'SBML_QUAL_MODEL', 'QUALModel', 'SBML_MODEL', 'Model', 'model'}
      fhandle = str2func('getQUALModelFieldnames');
    otherwise
      fhandle = str2func('disp');
      found = 0;
  end;
%%%% END getFieldname


%%%% ADD functions
%%%% ADD functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Fieldnames
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [SBMLfieldnames, nNumberFields] = getQUALModelFieldnames(level, ...
version, pkgVersion)
  if (~isValidLevelVersionCombination(level, version))
    error ('invalid level/version combination');
  end;

  SBMLfieldnames = [];
  nNumberFields = 0;

  if (level == 3)
    if (version < 3)
      if (pkgVersion == 1)
        SBMLfieldnames = {
        'qual_version', ...
        'qual_qualitativeSpecies', ...
        'qual_transition', ...
        };
        nNumberFields = 3;
      end;
    end;
  end;


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [SBMLfieldnames, nNumberFields] = getQualitativeSpeciesFieldnames(level, ...
version, pkgVersion)
  if (~isValidLevelVersionCombination(level, version))
    error ('invalid level/version combination');
  end;

  SBMLfieldnames = [];
  nNumberFields = 0;

  if (level == 3)
    if (version < 3)
      if (pkgVersion == 1)
        SBMLfieldnames = {
        'typecode', ...
        'metaid', ...
        'notes', ...
        'annotation', ...
        'cvterms', ...
        'sboTerm', ...
        'qual_id', ...
        'qual_name', ...
        'qual_compartment', ...
        'qual_constant', ...
        'qual_initialLevel', ...
        'qual_maxLevel', ...
        'level', ...
        'version', ...
        'qual_version', ...
        };
        nNumberFields = 15;
      end;
    end;
  end;


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [SBMLfieldnames, nNumberFields] = getTransitionFieldnames(level, ...
version, pkgVersion)
  if (~isValidLevelVersionCombination(level, version))
    error ('invalid level/version combination');
  end;

  SBMLfieldnames = [];
  nNumberFields = 0;

  if (level == 3)
    if (version < 3)
      if (pkgVersion == 1)
        SBMLfieldnames = {
        'typecode', ...
        'metaid', ...
        'notes', ...
        'annotation', ...
        'cvterms', ...
        'sboTerm', ...
        'qual_id', ...
        'qual_name', ...
        'qual_input', ...
        'qual_output', ...
        'qual_functionTerm', ...
        'level', ...
        'version', ...
        'qual_version', ...
        };
        nNumberFields = 14;
      end;
    end;
  end;


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [SBMLfieldnames, nNumberFields] = getInputFieldnames(level, ...
version, pkgVersion)
  if (~isValidLevelVersionCombination(level, version))
    error ('invalid level/version combination');
  end;

  SBMLfieldnames = [];
  nNumberFields = 0;

  if (level == 3)
    if (version < 3)
      if (pkgVersion == 1)
        SBMLfieldnames = {
        'typecode', ...
        'metaid', ...
        'notes', ...
        'annotation', ...
        'cvterms', ...
        'sboTerm', ...
        'qual_id', ...
        'qual_name', ...
        'qual_sign', ...
        'qual_qualitativeSpecies', ...
        'qual_transitionEffect', ...
        'qual_thresholdLevel', ...
        'level', ...
        'version', ...
        'qual_version', ...
        };
        nNumberFields = 15;
      end;
    end;
  end;


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [SBMLfieldnames, nNumberFields] = getOutputFieldnames(level, ...
version, pkgVersion)
  if (~isValidLevelVersionCombination(level, version))
    error ('invalid level/version combination');
  end;

  SBMLfieldnames = [];
  nNumberFields = 0;

  if (level == 3)
    if (version < 3)
      if (pkgVersion == 1)
        SBMLfieldnames = {
        'typecode', ...
        'metaid', ...
        'notes', ...
        'annotation', ...
        'cvterms', ...
        'sboTerm', ...
        'qual_id', ...
        'qual_qualitativeSpecies', ...
        'qual_transitionEffect', ...
        'qual_name', ...
        'qual_outputLevel', ...
        'level', ...
        'version', ...
        'qual_version', ...
        };
        nNumberFields = 14;
      end;
    end;
  end;


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [SBMLfieldnames, nNumberFields] = getDefaultTermFieldnames(level, ...
version, pkgVersion)
  if (~isValidLevelVersionCombination(level, version))
    error ('invalid level/version combination');
  end;

  SBMLfieldnames = [];
  nNumberFields = 0;

  if (level == 3)
    if (version < 3)
      if (pkgVersion == 1)
        SBMLfieldnames = {
        'typecode', ...
        'metaid', ...
        'notes', ...
        'annotation', ...
        'cvterms', ...
        'sboTerm', ...
        'qual_resultLevel', ...
        'level', ...
        'version', ...
        'qual_version', ...
        };
        nNumberFields = 10;
      end;
    end;
  end;


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [SBMLfieldnames, nNumberFields] = getFunctionTermFieldnames(level, ...
version, pkgVersion)
  if (~isValidLevelVersionCombination(level, version))
    error ('invalid level/version combination');
  end;

  SBMLfieldnames = [];
  nNumberFields = 0;

  if (level == 3)
    if (version < 3)
      if (pkgVersion == 1)
        SBMLfieldnames = {
        'typecode', ...
        'metaid', ...
        'notes', ...
        'annotation', ...
        'cvterms', ...
        'sboTerm', ...
        'qual_resultLevel', ...
        'math', ...
        'level', ...
        'version', ...
        'qual_version', ...
        };
        nNumberFields = 11;
      end;
    end;
  end;


%%%% END functions
